service: sf-image-processor
variablesResolutionMode: 20210326
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  region: ${opt:region, 'us-east-1'}
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  layers:
      - arn:aws:lambda:${self:provider.region}:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:23

custom:
  servicePrefix: sf-image-processor
  invokeLambda: arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:${self:custom.servicePrefix}-${self:provider.stage}-invokeImageProcessing

plugins:
  - serverless-step-functions
  - serverless-iam-roles-per-function

functions:
  invokeImageProcessing:
    handler: lambda_handlers/invoke_image_processing.invokeImageProcessing
    iamRoleStatements:
      - Effect: Allow
        Resource: !GetAtt ImageProcessingSF.Arn
        Action: states:StartExecution
    environment:
      SF: !GetAtt ImageProcessingSF.Arn

  getFileType:
    handler: lambda_handlers/get_file_type.get_file_type

  copyFile:
    handler: lambda_handlers/copy_to_destination.copy_file
    environment:
      DEST_BUCKET: !Ref ImageProcessingDestination
      REGION: ${self:provider.region}
    iamRoleStatements:
      - Effect: Allow
        Resource: 
          - arn:aws:s3:::sf-image-processor-img-processing-destination-bucket
          - arn:aws:s3:::sf-image-processor-img-processing-destination-bucket/*
          - arn:aws:s3:::sf-image-processor-img-processing-source-bucket
          - arn:aws:s3:::sf-image-processor-img-processing-source-bucket/*
        Action: s3:*

  resizeImage:
    handler: lambda_handlers/resize_image.resize
    environment:
      DEST_BUCKET: !GetAtt ImageProcessingDestination.Arn 

  writeToDB:
    handler: lambda_handlers/write_to_db.put_item
    environment:
      DBNAME: !Ref ThumbNailsDB
    iamRoleStatements:
      - Effect: Allow
        Resource: 
          - !GetAtt ThumbNailsDB.Arn
        Action: dynamodb:PutItem  

  deleteFile:
    handler: lambda_handlers/delete_file.delete_file
    environment:
      DEST_BUCKET: !GetAtt ImageProcessingDestination.Arn      
    

stepFunctions:
  ${file(stepFunction.yml)}

resources:
  Resources:
    ImageProcessingSource:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.servicePrefix}-img-processing-source-bucket
        NotificationConfiguration:
          LambdaConfigurations: 
            - Event: s3:ObjectCreated:*
              Function: ${self:custom.invokeLambda}

    LambdaResourcePermission:
      Type: AWS::Lambda::Permission
      Properties: 
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt InvokeImageProcessingLambdaFunction.Arn
        Principal: s3.amazonaws.com
        SourceAccount: ${aws:accountId}        
        SourceArn: !GetAtt ImageProcessingSource.Arn

    ImageProcessingDestination:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.servicePrefix}-img-processing-destination-bucket

    # create db
    ThumbNailsDB:
      Type: AWS::DynamoDB::Table
      Properties: 
        AttributeDefinitions: 
          - AttributeName: original
            AttributeType: S
        KeySchema:
          - AttributeName: original
            KeyType: HASH
        ProvisionedThroughput: 
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        TableName: ThumbNailsDB

    # thumbnails table- pk : original    

    SFExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: SFExecutionRole 
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - states.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: SFExecutionPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -  Effect: "Allow"
                   Action:
                     - "lambda:InvokeFunction"
                   Resource: "*"
